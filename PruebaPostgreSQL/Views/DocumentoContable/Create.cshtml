@using Entities.Contabilidad.ViewModels
@model DocumentoContableParaGuardarViewModel
@{
    ViewBag.Title = "Documento Contable";
    int whidhForm = 123;
}
<style>
    .display {
        display: none !important;
    }

    .dx-texteditor-input {  
        text-align: left;
    }
</style>
<h2>Documento Contable</h2>
<script>
    var showMulti = false;
    var showSucursal = false;
    //AQUI SE ESTABLECE LA MONEDA POR DEFECTO
    const DEFAULT_MONEY = 1;
    //Variable creada para seterar el valor  digirado cpor el usuario
    var valor = 0;
    var valorTrm = 0;

    var defaultValue = new Array();

    function CreateInputElement(itemName, itemValue, itemIndex, container, clase) {
        var $input = $("<input/>");
        $input.appendTo(container).attr({ type: "hidden", name: clase + itemIndex + "]." + itemName }).val(itemValue);
    }

    function saveAuto() {
        while (true) {
            setTimeout(function () {
                $("#grid").dxDataGrid("instance").saveEditData()
            }, 3000)
        }
    }

    function clickHandler(e) {
        if (e.validationGroup.validate().isValid) {
            $("#grid").dxDataGrid("instance").saveEditData();
            $("#grid").dxDataGrid("instance").getDataSource().load().done(function (items) {
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    for (var property in item) {
                        if (item.hasOwnProperty(property)) {
                            CreateInputElement(property, item[property], i, $("#editContable")[0], "ListaAuxiliarContable[");
                        }
                    }
                }
            })
        }
    }

    function toolbar(e) {
        var toolbarItems = e.toolbarOptions.items;
        $.each(toolbarItems, function (_, item) {
            if (item.name == "saveButton")
            {
                item.visible = false;
            }
        });
    }

    function lookup_displayExpr2(item) {
        if (!item) {
            return "";
        }
        return item.Nombre + " " + item.Codigo;
    }

    function lookup_displayExpr1(item) {
        if (!item) {
            return "";
        }
        return item.Identificacion + "-" + item.Nombreunido;
    }

    function lookup_displayExprtipo(item) {
        if (!item) {
            return "";
        }
        return item.Prefijo + "-" + item.Nombre;
    }

    function lookup_displayExpraux(item) {
        if (!item) {
            return "";
        }
        return item.Codigo + "-" + item.Nombre;
    }

    function lookup_displayExpraux1(item) {
        if (!item) {
            return "";
        }
        return item.Codigo + "-" + item.Nombre1;
    }

    function lookup_displayExprmon(item) {
        if (!item) {
            return "";
        }
        return item.Sigla + "-" + item.Nombre;
    }

    function guardar(e) {
        //$("#Operacion").val($(this).data("pdsa-action"));
        let list = JSON.stringify($("#grid").dxDataGrid("instance").getDataSource()._items)
        $("#escuadrado").dxTextBox("instance")._renderDisplayText(esDocumentoCuadrado())
        $("#listStringAuxFormat").dxTextBox("instance")._renderDisplayText(list)
        $("#grid").dxDataGrid("instance").saveEditData();
        $("#grid").dxDataGrid("instance").getDataSource().load().done(function (items) {
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                for (var property in item) {
                    if (item.hasOwnProperty(property)) {
                        CreateInputElement(property, item[property], i, $("#editContable")[0], "ListaAuxiliarContable[");
                    }
                }
            }
            $("#editContable").submit();
        });
    }

    function esDocumentoCuadrado() {
        let array = $("#grid").dxDataGrid("instance").getDataSource()._items
        let valCretidtos = 0;
        let valDebitos = 0;
        for (i = 0; i < array.length; i++) {
            let objItem = array[i];
            if (objItem.objItem === false) {
                valDebitos = valDebitos + parseInt(objItem.Valor);
            }
            else {
                valCretidtos = valCretidtos + parseInt(objItem.Valor);
            }
        }

        if (valCretidtos === valDebitos) {
            return true;
        }
        else {
            return false;
        }
    }

    $(document).ready(function () {
        $(".showMultiLibro").hide()
        $(".showSucursal").hide()
        //aqui se ocuelta el campo escuadrado
        $("[data-pdsa-action]").on("click", function (e) {
            e.preventDefault();
            $("#Operacion").val($(this).data("pdsa-action"));
            $("#grid").dxDataGrid("instance").getDataSource().load().done(function (items) {
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    for (var property in item) {
                        if (item.hasOwnProperty(property)) {
                            CreateInputElement(property, item[property], i, $("#editContable")[0], "ListaAuxiliarContable[");
                        }
                    }
                }
                refreshTreeList();
                $("#grid").dxDataGrid("instance").refresh()
                //saveAuto()
                $("#editContable").submit();

            });

        });
    });

    function keyPress(e) {
        if (e.event.key === "Delete") {
            e.component._setValue("")
        }
    }

    
    var event;
    function changeValue(e) {
        event = e;
        if (valMoney !== DEFAULT_MONEY) {
            valueTrm.option('value')
        }
    }

    function ocultar(e) {
        //let temp=e.elementparent().parent().parent().parent();
        //temp.hide()
        //e.css('display','none')
    }

    function eliminar(e) {
        let dataGrid = $("#grid").dxDataGrid("instance")
        dataGrid.beginUpdate();
        var keys = dataGrid.getSelectedRowKeys().reverse();
        $.each(keys, function (i, key) {
            var index = dataGrid.getRowIndexByKey(key);
            dataGrid.deleteRow(index);
            dataGrid.refresh();
        });
        dataGrid.endUpdate();
        dataGrid.saveEditData();
    }

    function eliminarDetail(e) {
        let dataGrid = $("#detail").dxDataGrid("instance")
        dataGrid.beginUpdate();
        var keys = dataGrid.getSelectedRowKeys().reverse();
        $.each(keys, function (i, key) {
            var index = dataGrid.getRowIndexByKey(key);
            dataGrid.deleteRow(index);
            dataGrid.refresh();
        });
        dataGrid.endUpdate();
        dataGrid.saveEditData();
    }

    function onRowInserted(e) {
        let array = $("#grid").dxDataGrid("instance").getDataSource()._items
        let maxValue = 0;
        for (let i = 0; i < array.length; i++) {
            if (array[i].Id > maxValue) {
                maxValue = array[i].Id;
            }
        }

        e.key = maxValue++;
        e.data.Id = maxValue;
    }

    function refreshTreeList() {
        $.get("/api/UtilsWebApi/getListSucursalMultilibro", function (data, status) {
            let array = $("#grid").dxDataGrid("instance").getDataSource()._items

            let TotalDebito = 0
            let TotalCredito = 0

            let arrayMultilibro = new Array();
            let arraySucursal = new Array();
            for (let i = 0; i < array.length; i++) {
                insertMultilibroArray(arrayMultilibro, array[i]);
                insertSucursalArray(arraySucursal, array[i]);
                if (array[i].Esdebito === true) {
                    TotalDebito = TotalDebito + parseFloat(array[i].Valor)
                    TotalDebito = TotalDebito + calcularTotalImpuesto(array[i].ListaImpuestos)
                }
                else {
                    TotalCredito = TotalCredito + parseFloat(array[i].Valor)
                    TotalDebito = TotalDebito + calcularTotalImpuesto(array[i].ListaImpuestos)
                }
            }

            let TotalDiferencia = parseFloat(TotalDebito) - parseFloat(TotalCredito);

            var tableBoby = ``;
            tableBoby += `<tr id="multi" onclick="onClickMulti()" style="background: #73879c;">
                    <td>Multilbro</td>
                    <td>`+ TotalDebito + `</td>
                    <td>`+ TotalCredito + `</td>
                    <td>`+ TotalDiferencia + `</td>
                </tr >`;
            for (let i = 0; i < arrayMultilibro.length; i++) {
                let multilibro = findByIdArray(data[0], arrayMultilibro[i].Idmultilibro).Nombre;//arrayMultilibro[i].Idmultilibro;
                let credito = parseFloat(arrayMultilibro[i].credito);
                let debito = parseFloat(arrayMultilibro[i].debito);
                let str = `<tr class="showMultiLibro">
                    <td>`+ multilibro + `</td>
                    <td>`+ debito + `</td>
                    <td>`+ credito + `</td>
                    <td>`+ (debito - credito) + `</td>
                </tr >`;
                tableBoby += str
            }

            tableBoby += `<tr id="sucursal" onclick="onClickSucursal()" style="background: #73879c;">
                    <td>Sucursal</td>
                    <td>`+ TotalDebito + `</td>
                    <td>`+ TotalCredito + `</td>
                    <td>`+ TotalDiferencia + `</td>
                </tr >`;
            for (let i = 0; i < arraySucursal.length; i++) {
                //findByIdArray(data[0], arrayMultilibro[i].Idmultilibro).Nombre
                //findByIdArray(data[1], arraySucursal[i].Idsucursal).Nombre
                let sucursal = findByIdArray(data[1], arraySucursal[i].Idsucursal).Nombre;
                let credito = arraySucursal[i].credito;
                let debito = arraySucursal[i].debito;
                let str = `<tr class="showSucursal">
                    <td>`+ sucursal + `</td>
                    <td>`+ debito + `</td>
                    <td>`+ credito + `</td>
                    <td>`+ (debito - credito) + `</td>
                </tr >`;
                tableBoby += str
            }
            $("#tableBody").html(tableBoby);
        });

    }

    function calcularTotalImpuesto(array) {
        let total=0;
        for (let i = 0; i < array.length; i++) {
            let temoVal = (array[i].Valor == null)?0:parseFloat( array[i].Valor);
            if (array[i].EsRetencion == 1) {
                //total = total + parseFloat(array[i].Valor);
                total = total + temoVal
            }
            else {
                //total = total - parseFloat( array[i].Valor);
                total = total - temoVal
            }
        }
        return total;
    }

    function findByIdArray(arrayData, id) {
        for (i = 0; i < arrayData.length; i++) {
            if (arrayData[i].Id === id) {
                return arrayData[i];
            }
        }
        return null;
    }
    function refreshTree(e) {
        refreshTreeList()
    }

    function insertMultilibroArray(array, obj) {
        let ban = false;
        for (let i = 0; i < array.length && ban == false; i++) {
            if (obj.Idmultilibro === array[i].Idmultilibro) {
                if (obj.Esdebito === true) {
                    array[i].debito += obj.Valor;
                    array[i].debito += calcularTotalImpuesto(obj.ListaImpuestos)
                }
                else {
                    array[i].credito += obj.Valor;
                    array[i].credito += calcularTotalImpuesto(obj.ListaImpuestos)
                }
            }
        }

        if (ban == false) {
            let temp = {}
            temp.Idmultilibro = obj.Idmultilibro
            if (obj.Esdebito === true) {
                temp.debito = obj.Valor;
                temp.debito += calcularTotalImpuesto(obj.ListaImpuestos)
                temp.credito = 0;
            }
            else {
                temp.credito = obj.Valor;
                temp.credito += calcularTotalImpuesto(obj.ListaImpuestos)
                temp.debito = 0;
            }
            array.push(temp)
        }
    }

    function insertSucursalArray(array, obj) {
        let ban = false;
        for (let i = 0; i < array.length && ban == false; i++) {
            if (obj.Idsucursal === array[i].Idsucursal) {
                if (obj.Esdebito === true) {
                    array[i].debito += obj.Valor;
                    array[i].debito += calcularTotalImpuesto(obj.ListaImpuestos)
                }
                else {
                    array[i].credito += obj.Valor;
                    array[i].credito += calcularTotalImpuesto(obj.ListaImpuestos)
                }
            }
        }

        if (ban == false) {
            let temp = {}
            temp.Idsucursal = obj.Idsucursal
            if (obj.Esdebito === true) {
                temp.debito = obj.Valor;
                temp.debito += calcularTotalImpuesto(obj.ListaImpuestos)
                temp.credito = 0;
            }
            else {
                temp.credito = obj.Valor;
                temp.credito += calcularTotalImpuesto(obj.ListaImpuestos)
                temp.debito = 0;
            }
            array.push(temp)
        }
    }

    function onClickMulti() {
        if (showMulti == false) {
            $(".showMultiLibro").show()
            showMulti = true;
        }
        else {
            $(".showMultiLibro").hide()
            showMulti = false;
        }
    }

    function onClickSucursal() {
        if (showSucursal == false) {
            $(".showSucursal").show()
            showSucursal = true;
        }
        else {
            $(".showSucursal").hide()
            showSucursal = false;
        }
    }
    //funcion llave prescionada
    $(document).keydown(function (e) {
        if (e.ctrlKey && e.which == 40) {
            $("#grid").dxDataGrid("instance").addRow()
        }
    })


    //fucion al inicializar un nuevo registro
    function initNewRow(e) {
        e.data.Idsucursal = $('#idSucursal').dxSelectBox('instance').option('value')
        e.data.Idunidadnegocio = $('#idUnidadNegocio').dxSelectBox('instance').option('value')
        e.data.Idccostos = $('#idCentroCostos').dxSelectBox('instance').option('value')
        e.data.Idtercero = $('#idTercero').dxSelectBox('instance').option('value')
        e.data.Valor = 0;
        e.data.ListaImpuestos = [];
        e.component.saveEditData()
    }

    function prepareTollbar(e) {
        var toolbarItems = e.toolbarOptions.items;
        $.each(toolbarItems, function (_, item) {
            if (item.name == "saveButton" || item.name == "revertButton") {
                item.visible = false;
            }
        });
    }

    //ELiminar DOcumento
    function deleteDocumento(e) {
        let $popupContainer = $("<div />")
            .addClass("popup")
            .appendTo($("#popup"));
        let popupOptions = {
            width: 300,
            height: 250,
            contentTemplate: function() {
                return $("<div />").append(
                    $("<p><span>Desea Eliminar los Documentos Seleccionados</span></p>"),
                    $("<hr/>"),
                    $("<a class='btn' onClick=\"$('.popup').remove();\">Cancelar</a>"),
                    $("<a class='btn btn-danger' onClick=\"$('.popup').remove();eliminar(null)\">Eliminar</a>")
                );
            }
        }
        let popup = $popupContainer.dxPopup(popupOptions).dxPopup("instance");
        popup.show();
    };

    //Eliminar Impuesto
    function deleteImpuesto(e) {
        let $popupContainer = $("<div />")
            .addClass("popup")
            .appendTo($("#popup"));
        let popupOptions = {
            width: 300,
            height: 250,
            contentTemplate: function() {
                return $("<div />").append(
                    $("<p><span>Desea Eliminar los Impuestos Seleccionados</span></p>"),
                    $("<hr/>"),
                    $("<a class='btn' onClick=\"$('.popup').remove();\">Cancelar</a>"),
                    $("<a class='btn btn-danger' onClick=\"$('.popup').remove();eliminarDetail(null)\">Eliminar</a>")
                );
            }
        }
        let popup = $popupContainer.dxPopup(popupOptions).dxPopup("instance");
        popup.show();
    };

    //chage Value Valor Alterno
    function calulateValue(e) {
        let datagrid = $("#grid").dxDataGrid("instance");
        //datagrid.cellValue(row, 6, valorCuota)
    }

    function startEditing(e) {
        let dataGrid=$("#grid").dxDataGrid("instance")
        let rowIndex = e.component.getRowIndexByKey(e.key);
        let datagridItem = $("#grid").dxDataGrid("instance").getDataSource()._items
        let currentData = e.data
        let savedValue = datagridItem[rowIndex]
        if (savedValue != null) {
            if (currentData.ValorAlterno != savedValue.ValorAlterno) {
                let moneySelected = $('#moneySelected').dxSelectBox('instance').option('value');
                let valorTrm = $('#trmSelected').dxTextBox('instance').option('value');
                if (currentData.ValorAlterno == "0" || moneySelected != DEFAULT_MONEY) {
                    currentData.Valor = valorTrm * parseFloat(currentData.ValorAlterno)
                    savedValue.Valor = currentData.Valor
                    savedValue.ValorAlterno=currentData.ValorAlterno
                }
                else {
                    currentData.Valor = parseFloat(currentData.ValorAlterno)
                }

            }
            else {
            }
        }
        //e.component.refresh();
        refreshTree(null);
    }

    function calcularValorAlterno(e) {
        //console.log(e)
        //console.log(e.key)
        //console.log($("#grid").dxDataGrid("instance").getRowIndexByKey(e.key))
        let temp = getRowById($("#grid").dxDataGrid("instance").getDataSource()._items, e.Id)
        console.log(e)
        console.log(temp)
        let moneySelected = $('#moneySelected').dxSelectBox('instance').option('value');
        let valorTrm = $('#trmSelected').dxTextBox('instance').option('value');
        if (e !== null) {
            if (e.ValorAlterno == "0" || moneySelected != DEFAULT_MONEY) {
                e.Valor = valorTrm * parseFloat(e.ValorAlterno);
                return e.Valor;
            }
            else {
                e.Valor = parseFloat(e.ValorAlterno)
                return e.Valor;
            }
        }
    }

    function getRowById(array, id) {
        for (let i = 0; i < array.length;i++) {
            if (array[i].Id == id) {
                return array[i]
            }
        }
        return null
    }

    function getDocumentoById(id) {
        let array = $("#grid").dxDataGrid("instance").getDataSource()._items
        for (i = 0; i < array.length; i++) {
            if (array[i].Id == id) {
                return array[i];
            }
        }
        return null;
    }
</script>
@foreach (var item in Model.Error)
{
    <h6 style="color:red">@item</h6>
}
@using (Html.BeginForm("Create", "DocumentoContable", FormMethod.Post, new { id = "editContable" }))
{
    @Html.HiddenFor(m => m.Id)
    <div class="dx-fieldset">
        <div class="dx-field">
            <div class="dx-field-value">
                @(Html.DevExtreme()
                        .Button()
                        .Icon("save")
                        .Hint("Guardar")
                        .OnClick("guardar")
                        .ElementAttr("data-pdsa-action", "guardar")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Icon("check")
                        .Hint("Aprobar")
                        .ElementAttr("data-pdsa-action", "aprobar")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Icon("close")
                        .Hint("Anular")
                        .ElementAttr("data-pdsa-action", "anular")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Icon("chevrondoubleleft")
                        .Hint("Primero")
                        .ElementAttr("data-pdsa-action", "primero")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Icon("back")
                        .Hint("Anterior")
                        .ElementAttr("data-pdsa-action", "anterior")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Icon("plus")
                        .Hint("Nuevo")
                        .ElementAttr("data-pdsa-action", "nuevo")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Icon("chevronnext")
                        .Hint("Siguiente")
                        .ElementAttr("data-pdsa-action", "siguiente")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Hint("Ultimo")
                        .ElementAttr("data-pdsa-action", "ultimo")
                        .Icon("chevrondoubleright")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Icon("print")
                        .Hint("Imprimir Recibo")
                        .ElementAttr("data-pdsa-action", "imprimir")
                )
                @(Html.DevExtreme()
                        .Button()
                        .Icon("search")
                        .Hint("Buscar Recibo")
                        .ElementAttr("data-pdsa-action", "consultar")
                        .OnClick(@"function () {
                           location.href='./search'
                        }")
                )
            </div>
        </div>
    </div>
    @(Html.DevExtreme()
    .Form<DocumentoContableParaGuardarViewModel>()
    .ValidationGroup("documentoContableViewModel")
    .FormData(Model)
    .Items(formItems =>
    {
    formItems.AddGroup()
            .Caption("Datos de Documento")
            .ColCount(3).Items(formItems1 =>
            {
                formItems1.AddSimpleFor(m => m.Idsucursal)
                        .Editor(e =>
                            e.SelectBox().Width(whidhForm)
                            .DataSource(ds => ds.WebApi().Controller("SucursalWebApi").LoadAction("Get").Key("Id"))
                        .ID("idSucursal")
                        .SearchExpr(new[] { "Codigo", "Nombre" })
                        .DisplayExpr("Nombre")
                        .Placeholder("Seleccionar...")
                        .ValueExpr("Id")
                        .SearchEnabled(true)
                        .ItemTemplate(@<text>
                            <div class="custom-item">
                                <div><%= Codigo %> <%= Nombre %> </div>
                            </div>
                        </text>)).IsRequired(true);

          formItems1.AddSimpleFor(m => m.Idtipodocumento)
              .Editor(e => e.SelectBox().Width(whidhForm)
              .DataSource(d => d.WebApi()
              .Controller("TipoDocumentoWebApi")
              .LoadAction("Get").Key("Id"))
              .SearchExpr(new[] { "Prefijo", "Nombre" })
              .DisplayExpr(new JS("lookup_displayExprtipo"))
              .ValueExpr("Id")
              .Placeholder("Seleccionar...")
              .SearchEnabled(true)
              .ItemTemplate(@<text>
                                <div class="custom-item">
                                    <div><%= Prefijo %> - <%= Nombre %> </div>
                                </div>
            </text>)).IsRequired(true);

formItems1.AddSimpleFor(x => x.Nrodocumento).Editor(e=>e.TextBox().Width(whidhForm));

formItems1.AddSimpleFor(m => m.IdTercero).Editor(e =>
e.SelectBox().Width(whidhForm)
.DataSource(d => d.WebApi().Controller("TerceroMaestroWebApi").LoadAction("Get").Key("Id"))
.ID("idTercero")
.SearchExpr(new[] { "Identificacion", "Nombreunido" })
.DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
.DisplayExpr(new JS("lookup_displayExpr1"))
.ValueExpr("Id")
.Placeholder("Seleccionar...")
.SearchEnabled(true)
.ItemTemplate(
            @<text>
                <div class="custom-item">
                    <div><%= Identificacion %> - <%= Nombreunido %> </div>
                </div>
            </text>)).IsRequired(true);

formItems1.AddSimpleFor(m => m.Estado)
.Editor(e =>
  e.SelectBox().Width(whidhForm)
  .DataSource(d => d.WebApi().Controller("EstadoContableWebApi").LoadAction("Get").Key("Id"))
  .SearchExpr("Nombre")
  .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
  .DisplayExpr("Nombre")
  .Disabled(false)
  .ValueExpr("Id")
  .Placeholder("Seleccionar...")
  .SearchEnabled(true)
  .ItemTemplate(@<text>
                        <div class="custom-item">
                            <div><%= Identificacion %> - <%= Nombreunido %> </div>
                        </div>
</text>))
.IsRequired(true);

formItems1.AddSimpleFor(m => m.Fechadocumento)
.Editor(e => e.DateBox().Width(whidhForm));

formItems1.AddSimpleFor(m => m.Fechacontabilizacion).Editor(e => e.DateBox().Width(whidhForm));

formItems1.AddSimpleFor(m => m.IdCentroCosto).Editor(e => e.SelectBox().Width(whidhForm)
.DataSource(d => d.WebApi().Controller("AuxiliaresCentroCostosWebApi").Key("Id"))
.SearchExpr(new[] { "Codigo", "Nombre" })
.ID("idCentroCostos")
.DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
.DisplayExpr(new JS("lookup_displayExpraux"))
.ValueExpr("Id")
.Placeholder("Seleccionar...")
.SearchEnabled(true)
.ItemTemplate(@<text>
    <div class="custom-item">
        <div><%= Codigo %> - <%= Nombre %> </div>
    </div>
</text>))
.IsRequired(true);

formItems1.AddSimpleFor(m => m.IdUnidadNegocio)
.Editor(e => e.SelectBox().Width(whidhForm).DataSource(d => d.WebApi().Controller("UnidadNegocioWebApi").Key("Id"))
.ID("idUnidadNegocio")
.SearchExpr(new[] { "Codigo", "Nombre" })
.DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
.DisplayExpr(new JS("lookup_displayExpraux"))
.ValueExpr("Id")
.Placeholder("Seleccionar...")
.SearchEnabled(true)
.ItemTemplate(@<text>
                <div class="custom-item">
                    <div><%= Codigo %> - <%= Nombre %> </div>
                </div>
</text>))
.IsRequired(true);

formItems1.AddSimpleFor(m => m.IdMoneda)
.Editor(e => e.SelectBox().Width(whidhForm).DataSource(d => d.WebApi().Controller("MonedaWebApi").Key("Id"))
.SearchExpr(new[] { "Sigla", "Nombre" })
.DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
.DisplayExpr(new JS("lookup_displayExprmon"))
.ValueExpr("Id")
.SearchEnabled(true)
.ItemTemplate(@<text>
                <div class="custom-item">
                    <div><%= Sigla %> - <%= Nombre %> </div>
                </div>
</text>)
.ID("moneySelected"))
.IsRequired(true);

formItems1.AddSimpleFor(m => m.Trm)
.Editor(e => e
.TextBox()
.Width(whidhForm)
.ID("trmSelected"))
.IsRequired(false);

formItems1.AddSimpleFor(m => m.Notas)
.Editor(e => e
.TextArea().Width(whidhForm)
).IsRequired(true);

formItems1.AddSimpleFor(m => m.DocumentosRefencia)
.Editor(e => e.SelectBox().Width(whidhForm)
.DisplayExpr(new JS("lookup_displayExprmon"))
.ValueExpr("Id")
.SearchEnabled(true)
.ID("documentosReferencia")
).IsRequired(false);

formItems1.AddSimpleFor(m => m.DocumentosQueReferencian)
.Editor(e => e.SelectBox().Width(whidhForm)
.DisplayExpr(new JS("lookup_displayExprmon"))
.ValueExpr("Id")
.SearchEnabled(true)
.ID("documentosQueReferencian"))
.IsRequired(false);

formItems1.AddSimpleFor(m => m.IsCuadrado)
.Editor(e => e.TextBox().Width(whidhForm)
.ID("escuadrado")
.Visible(true)
.OnInitialized(@"ocultar"))
.CssClass("display");

formItems1.AddSimpleFor(m => m.ListStringAuxFormat)
.Editor(e => e.TextBox().Width(whidhForm)
.ID("listStringAuxFormat")
.Visible(true)
.OnInitialized(@"ocultar"))
.CssClass("display");
}
);

formItems.AddSimple()
.Template(@<text>
                @(Html.DevExtreme()
                .DataGrid<AuxiliarContableViewModel>()
                .ID("grid")
                .ShowBorders(true)
                .Editing(s => s.Mode(GridEditMode.Batch).AllowUpdating(true).AllowAdding(true).AllowDeleting(true))
                .DataSource(@Model.ListaAuxiliarContable, new string[] { "Id" })
                .GroupPanel(gp => gp.EmptyPanelText("hola"))
                .Columns(columns =>
                {
                    columns.Add()
                    .DataField("Idauxiliar")
                    .Caption("Auxiliar")
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("aux_template")).Width(100)
                    .Fixed(true)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idtercero)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("ter_template")).Width(130)
                    .Fixed(true)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idmultilibro)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("mul_template")).Width(100)
                    .Fixed(true)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idsucursal).ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("suc_template")).Width(100)
                    .Fixed(true)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.ValorAlterno)
                    .EditCellTemplate(new TemplateName("val_alterno_template"))
                    .Width(130)
                    .Fixed(true);

                    columns.AddFor(m => m.Valor)
                    .EditCellTemplate(new TemplateName("val_template"))
                    //.CalculateCellValue(@"calcularValorAlterno")
                    .Width(130)
                    .Fixed(true);

                    columns.AddFor(m => m.Esdebito);

                    columns.AddFor(m => m.Notas).Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idunidadnegocio)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("un_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idccostos)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("cc_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idfe)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("fe_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idproyecto)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("pro_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idcontrolfiscal)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("cfi_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Doccruce)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Nrocruce);

                    columns.AddFor(m => m.Fechavencimiento);

                    columns.AddFor(m => m.Periodovencimiento);

                    columns.AddFor(m => m.Refbanco);

                    columns.AddFor(m => m.IdTerceroDos)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("ter2_template"))
                    .Alignment(HorizontalAlignment.Left);
                })
                .Paging(paging => paging.Enabled(false))
                .FilterRow(f => f.Visible(true))
                .HeaderFilter(f => f.Visible(true))
                .GroupPanel(p => p.Visible(true))
                .Grouping(g => g.AutoExpandAll(false).Texts(x => x.GroupContinuedMessage("hola")))
                .RemoteOperations(true)
                .AllowColumnResizing(true)
                .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
                .ColumnWidth(200)
                .FocusedRowEnabled(true)
                .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
                .Selection(s => s.Mode(SelectionMode.Multiple))
                .MasterDetail(m => m.Enabled(true).Template(new TemplateName("MaterdelailAuxContableDetail")))
                .OnRowInserted("onRowInserted")
                .OnRowUpdated("refreshTree")
                .OnContentReady("refreshTree")
                .OnInitNewRow("initNewRow")
                //.OnToolbarPreparing("prepareTollbar")
                .OnEditingStart("startEditing")
                .AllowColumnReordering(false)
                //.OnRowInserted("insertedRow")
                //.OnRowInserting("insertedRow")
                )
                <br />
                <div>
                    @(Html.DevExtreme().Button()
                        .Text("Eliminar")
                        .Type(ButtonType.Danger)
                        .StylingMode(ButtonStylingMode.Contained)
                        .Width(120)
                        .OnClick("deleteDocumento")
                    )
                </div>
                <br />
                <div class="col-md-6">
                    <table class="table">
                        <thead>
                        <th></th>
                        <th>Debito</th>
                        <th>Credito</th>
                        <th>Diferencia</th>
                        </thead>
                        <tbody id="tableBody">
                        </tbody>
                    </table>
                </div>

                <div id="popup"></div>
</text>);
}))
}
@Html.ValidationSummary()

@using (Html.DevExtreme().NamedTemplate("val_template"))
{
    @(Html.DevExtreme()
        .TextBox()
        .OnValueChanged(@"function(args){
            setValue(args.value);
            valor=args.value;
        }")
        .Value(new JS("data.Valor"))
        .ID("id_val_template").ActiveStateEnabled(true)
    )
}

@using (Html.DevExtreme().NamedTemplate("val_alterno_template"))
{
    @(Html.DevExtreme()
        .TextBox()
        .OnValueChanged(@"function(args){
            setValue(args.value);
            valor=args.value;
        }")
        .Value(new JS("data.ValorAlterno"))
        .ID("id_val_alterno_template")
    )
}

@using (Html.DevExtreme().NamedTemplate("aux_template"))
{
    @(Html.DevExtreme()
            .SelectBox()
            .Width(400)
            .Value(new JS("data.Idauxiliar"))
            .SearchExpr(new string[] { "Codigo", "Nombre1" })
            .OnValueChanged(@"function(args){setValue(args.value);}")
            .DataSource(ds => ds.WebApi().Controller("AuxiliaresWebApi").LoadAction("Get").Key("Id"))
            .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
            .DisplayExpr(new JS("lookup_displayExpraux1"))
            .ValueExpr("Id")
            .SearchEnabled(true)
            .OnKeyPress("keyPress")
            .OnKeyDown("keyPress")
            //.OnKeyPress(@"function(args){
            //    setValue('');}")
            //.OnKeyDown(@"function(args){
            //    setValue('');}")
            .ItemTemplate(@<text>
                        <div class="custom-item">
                            <div><%= Codigo %> - <%= Nombre1 %> </div>
                        </div>
            </text>)
    )
}
@using (Html.DevExtreme().NamedTemplate("ter_template"))
{
    @(Html.DevExtreme().SelectBox()
        .Value(new JS("data.Idtercero"))
        .SearchExpr(new string[] { "Identificacion", "Nombreunido" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("TerceroMaestroWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr(new JS("lookup_displayExpr1"))
        .ValueExpr("Id")
        .OnKeyPress("keyPress")
        .OnKeyDown("keyPress")
        .SearchEnabled(true)
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div><%= Identificacion %> - <%= Nombreunido %> </div>
                    </div>
        </text>)
    )
}
@using (Html.DevExtreme().NamedTemplate("ter2_template"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.IdTerceroDos"))
        .SearchExpr(new string[] { "Identificacion", "Nombreunido" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("TerceroMaestroWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr(new JS("lookup_displayExpr1"))
        .ValueExpr("Id")
        .OnKeyPress("keyPress")
        .OnKeyDown("keyPress")
        .SearchEnabled(true)
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div><%= Identificacion %> - <%= Nombreunido %> </div>
                    </div>
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("mul_template"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.Idmultilibro"))
        .OnKeyPress("keyPress")
        .OnKeyDown("keyPress")
        .SearchExpr(new string[] { "Nombre" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("MultilibroWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr("Nombre")
        .ValueExpr("Id")
        .SearchEnabled(true)
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div> <%= Nombre %> </div>
                    </div>
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("un_template"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.Idunidadnegocio"))
        .SearchExpr(new string[] { "Nombre" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("UnidadNegocioWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr("Nombre")
        .ValueExpr("Id")
        .SearchEnabled(true)
        .OnKeyPress("keyPress")
        .OnKeyDown("keyPress")
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div> <%= Nombre %> </div>
                    </div>
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("suc_template"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.Idsucursal"))
        .SearchExpr(new string[] { "Codigo", "Nombre" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("SucursalWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr("Nombre")
        .ValueExpr("Id")
        .OnKeyPress("keyPress")
        .OnKeyDown("keyPress")
        .SearchEnabled(true)
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div> <%= Codigo %> - <%= Nombre %> </div>
                    </div>
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("cc_template"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.Idccostos"))
        .SearchExpr(new string[] { "Codigo", "Nombre" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("AuxiliaresCentroCostosWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr("Nombre")
        .ValueExpr("Id")
        .OnKeyPress("keyPress")
        .OnKeyDown("keyPress")
        .SearchEnabled(true)
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div> <%= Codigo %> - <%= Nombre %> </div>
                    </div>
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("fe_template"))
{
    @(Html.DevExtreme().SelectBox()
    .Value(new JS("data.Idfe"))
    .SearchExpr(new string[] { "Codigo", "Nombre" })
    .OnValueChanged(@"function(args){setValue(args.value);}")
    .DataSource(ds => ds.WebApi().Controller("AuxiliarFlujoEfectivoWebApi").LoadAction("Get").Key("Id"))
    .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
    .DisplayExpr("Nombre")
    .ValueExpr("Id")
    .OnKeyPress("keyPress")
    .OnKeyDown("keyPress")
    .SearchEnabled(true)
    .ItemTemplate(@<text>
                <div class="custom-item">
                    <div> <%= Codigo %> - <%= Nombre %> </div>
                </div>
    </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("pro_template"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.Idproyecto"))
        .SearchExpr(new string[] { "Codigo", "Nombre" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("ProyectoWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr("Nombre")
        .ValueExpr("Id")
        .OnKeyPress("keyPress")
        .OnKeyDown("keyPress")
        .SearchEnabled(true)
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div> <%= Codigo %> - <%= Nombre %> </div>
                    </div>
        </text>)
    )
}
@using (Html.DevExtreme().NamedTemplate("cfi_template"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.Idcontrolfiscal"))
        .SearchExpr(new string[] { "Nombre" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("ControlFiscalWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr("Nombre")
        .ValueExpr("Id")
        .SearchEnabled(true)
        .OnKeyPress("keyPress")
        .OnKeyDown("keyPress")
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div> <%= Nombre %> </div>
                    </div>
        </text>)
    )
}

<!--MasterDetailTemplate-->

@using (Html.DevExtreme().NamedTemplate("MaterdelailAuxContableDetail"))
{
    @(Html.DevExtreme()
                .DataGrid<ImpuestoORetencionViewModel>()
                .DataSource(new JS("data.ListaImpuestos"))
                .ID("detail")
                .KeyExpr(new string[] { "Id" })
                .ShowBorders(true)
                .Editing(s => s.Mode(GridEditMode.Batch).AllowUpdating(true).AllowAdding(true).AllowDeleting(true))
                .GroupPanel(gp => gp.EmptyPanelText("hola"))
                .Columns(columns =>
                {
                    //IMPUESTO / RETENCION
                    //columns.AddFor(m => m.EsRetencion);
                    columns.AddFor(m => m.EsRetencion)
                    //.EditCellTemplate(new TemplateName("tipo_impuesto"))
                    .Lookup(lk=>lk.DataSource(@Model.ListaImpuestos).DisplayExpr("Nombre").ValueExpr("Id"))
                    .ShowEditorAlways(true);

                    //.DataField("Tipo Tributo");
                    //CODIGO)
                    columns.AddFor(m => m.Codigo)
                    //.EditCellTemplate(new TemplateName("codigco_template"));
                    .Lookup(lk => lk.DataSource(ds => ds.WebApi().Controller("CodigoImpuestoWebApi").LoadAction("Get").Key("Id")).ValueExpr("Id").DisplayExpr("Nombre"))
                    .ShowEditorAlways(true)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Porcentaje)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.BaseImpuesto)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Valor)
                    .EditCellTemplate(new TemplateName("val_template"));

                    columns.AddFor(m => m.Notas)
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.IdTercero)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("ter_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.IdMultilibro)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("mul_template"))
                    .Alignment(HorizontalAlignment.Left);
                    columns.AddFor(m => m.IdSucursal)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("suc_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.IdUnidadNegocio)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("un_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.IdCentroCosto)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("cc_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.IdProyecto)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("pro_template"))
                    .Alignment(HorizontalAlignment.Left);

                    columns.AddFor(m => m.Idcontrolfiscal)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("cfi_template"))
                    .Alignment(HorizontalAlignment.Left);
                    //FLUJO EFECTIVO

                    columns.AddFor(m => m.Idfe)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("fe_template"))
                    .Alignment(HorizontalAlignment.Left);

                    //PREFIJO DOC
                    columns.AddFor(m => m.Periodovencimiento);
                    //DOC. CRUCE
                    columns.AddFor(m => m.Doccruce);
                    //NO CRUCE	FECHA VENCIMIENTO
                    columns.AddFor(m => m.Nrocruce);
                    //PERIODO VENCIMIENTO
                    columns.AddFor(m => m.Periodovencimiento);
                    //REF. BANCO
                    columns.AddFor(m => m.Refbanco);
                    //TERCERO 2
                    columns.AddFor(m => m.IdTerceroDos)
                    .ShowEditorAlways(true)
                    .EditCellTemplate(new TemplateName("ter2_template"))
                    .Alignment(HorizontalAlignment.Left);
                })
                .Paging(paging => paging.Enabled(false))
                .FilterRow(f => f.Visible(true))
                .HeaderFilter(f => f.Visible(true))
                .GroupPanel(p => p.Visible(true))
                .Grouping(g => g.AutoExpandAll(false).Texts(x => x.GroupContinuedMessage("hola")))
                .RemoteOperations(true)
                .AllowColumnResizing(true)
                .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
                .ColumnWidth(200)
                .FocusedRowEnabled(true)
                .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
                .Selection(s => s.Mode(SelectionMode.Multiple))
                .OnRowUpdated("refreshTree")
    //.OnToolbarPreparing("prepareTollbar")
    )

    <div>
        @(Html.DevExtreme().Button()
            .Text("Eliminar")
            .Type(ButtonType.Danger)
            .StylingMode(ButtonStylingMode.Contained)
            .Width(120)
            .OnClick("deleteImpuesto")
        )
    </div>
}

@using (Html.DevExtreme().NamedTemplate("codigco_template"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.Idsucursal"))
        .SearchExpr(new string[] { "Codigo", "Nombre" })
        .OnValueChanged(@"function(args){setValue(args.value);}")
        .DataSource(ds => ds.WebApi().Controller("CodigoImpuestoWebApi").LoadAction("Get").Key("Id"))
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr("Nombre")
        .ValueExpr("Id")
        .SearchEnabled(true)
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div> <%= Codigo %> - <%= Nombre %> </div>
                    </div>
        </text>)
    )
}

@using (Html.DevExtreme().NamedTemplate("tipo_impuesto"))
{
    @(Html.DevExtreme()
        .SelectBox()
        .Value(new JS("data.Esretencion"))
        //.SearchExpr(new string[] { "Id", "Nombre" })
        .SearchExpr("Nombre")
        .OnValueChanged(@"function(args){setValue(args.value);}")
        //.DataSource(ds => ds.WebApi().Controller("TipoImpuestoWebApi").LoadAction("Get").Key("Id"))
        .DataSource(@Model.ListaImpuestos, new string[] { "Id" })
        .DataSourceOptions(opt => opt.Paginate(true).PageSize(10))
        .DisplayExpr("Nombre")
        .ValueExpr("Id")
        .SearchEnabled(true)
        .ItemTemplate(@<text>
                    <div class="custom-item">
                        <div> <%= Id %> - <%= Nombre %> </div>
                    </div>
        </text>)
    )
}